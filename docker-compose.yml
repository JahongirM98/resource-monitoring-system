services:
  db:
    image: mysql:8.0
    container_name: rm_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpass}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-monitoring}
      MYSQL_USER: ${MYSQL_USER:-monitoring}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-monitoring_pass}
    ports:
      - "${MYSQL_PORT:-3307}:3306"
    command:
      - "--default-authentication-plugin=mysql_native_password"
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${MYSQL_ROOT_PASSWORD:-rootpass}"]
      interval: 5s
      timeout: 3s
      retries: 30

  redis:
    image: redis:7
    container_name: rm_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"

  app:
    build: .
    container_name: rm_app
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8000:8000"
    command: >
      sh -c "
        echo 'Waiting for DB...' &&
        sleep 10 &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn monitor_site.wsgi:application --bind 0.0.0.0:8000 --workers 3
      "
  

  # опционально — Celery
  worker:
    build: .
    container_name: rm_worker
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: celery -A monitor_site worker -l INFO

  beat:
    build: .
    container_name: rm_beat
    env_file: .env
    depends_on:
      redis:
        condition: service_started
    command: celery -A monitor_site beat -l INFO
